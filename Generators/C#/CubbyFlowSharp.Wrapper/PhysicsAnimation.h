// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
#pragma once

#include "CppSharp.h"
#include <C:/Users/utilForever/Documents/GitHub/CubbyFlow/Includes/Core/Animation/PhysicsAnimation.h>
#include "Animation.h"

namespace CubbyFlowSharp
{
    namespace CubbyFlow
    {
        ref class Frame;
        ref class PhysicsAnimation;
    }
}

namespace CubbyFlowSharp
{
    namespace CubbyFlow
    {
        /// <summary>Abstract base class for physics-based animation.</summary>
        /// <remarks>
        /// <para>This class represents physics-based animation by adding time-integration</para>
        /// <para>specific functions to Animation class.</para>
        /// </remarks>
        public ref class PhysicsAnimation : CubbyFlowSharp::CubbyFlow::Animation
        {
        public:

            PhysicsAnimation(::CubbyFlow::PhysicsAnimation* native);
            static PhysicsAnimation^ __CreateInstance(::System::IntPtr native);
            /// <summary>Default constructor.</summary>
            PhysicsAnimation();

            PhysicsAnimation(CubbyFlowSharp::CubbyFlow::PhysicsAnimation^ _0);

            ~PhysicsAnimation();

            /// <summary>Returns true if fixed sub-timestepping is used.</summary>
            /// <param name="isUsing">True to enable fixed sub-stepping.</param>
            /// <returns>
            /// <para>True if using fixed sub time steps, false otherwise.</para>
            /// <para>Sets true if fixed sub-timestepping is used.</para>
            /// <para>When performing a time-integration, it is often required to take</para>
            /// <para>sub-timestepping for better results. The sub-stepping can be either</para>
            /// <para>fixed rate or adaptive, and this function sets which feature should be</para>
            /// <para>selected.</para>
            /// </returns>
            /// <remarks>
            /// <para>When performing a time-integration, it is often required to take</para>
            /// <para>sub-timestepping for better results. The sub-stepping can be either</para>
            /// <para>fixed rate or adaptive, and this function returns which feature is</para>
            /// <para>currently selected.</para>
            /// </remarks>
            property bool IsUsingFixedSubTimeSteps
            {
                bool get();
                void set(bool);
            }

            /// <summary>Returns the number of fixed sub-timesteps.</summary>
            /// <param name="numberOfSteps">The number of fixed sub-timesteps.</param>
            /// <returns>
            /// <para>The number of fixed sub-timesteps.</para>
            /// <para>Sets the number of fixed sub-timesteps.</para>
            /// <para>When performing a time-integration, it is often required to take</para>
            /// <para>sub-timestepping for better results. The sub-stepping can be either</para>
            /// <para>fixed rate or adaptive, and this function sets the number of fixed</para>
            /// <para>sub-steps.</para>
            /// </returns>
            /// <remarks>
            /// <para>When performing a time-integration, it is often required to take</para>
            /// <para>sub-timestepping for better results. The sub-stepping can be either</para>
            /// <para>fixed rate or adaptive, and this function returns the number of fixed</para>
            /// <para>sub-steps.</para>
            /// </remarks>
            property unsigned int NumberOfFixedSubTimeSteps
            {
                unsigned int get();
                void set(unsigned int);
            }

            /// <summary>Returns current frame.</summary>
            /// <remarks>Sets current frame cursor (but do not invoke update()).</remarks>
            property CubbyFlowSharp::CubbyFlow::Frame^ CurrentFrame
            {
                CubbyFlowSharp::CubbyFlow::Frame^ get();
                void set(CubbyFlowSharp::CubbyFlow::Frame^);
            }

            /// <summary>Returns current time in seconds.</summary>
            /// <remarks>
            /// <para>This function returns the current time which is calculated by adding</para>
            /// <para>current frame + sub-timesteps it passed.</para>
            /// </remarks>
            property double CurrentTimeInSeconds
            {
                double get();
            }

            /// <summary>Advances a single frame.</summary>
            void AdvanceSingleFrame();
        };
    }
}
