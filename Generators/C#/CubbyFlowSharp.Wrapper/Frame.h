// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
#pragma once

#include "CppSharp.h"
#include <C:/Users/utilForever/Documents/GitHub/CubbyFlow/Includes/Core/Animation/Frame.h>

namespace CubbyFlowSharp
{
    namespace CubbyFlow
    {
        ref class Frame;
    }
}

namespace CubbyFlowSharp
{
    namespace CubbyFlow
    {
        /// <summary>Representation of an animation frame.</summary>
        /// <remarks>
        /// <para>This struct holds current animation frame index and frame interval in</para>
        /// <para>seconds.</para>
        /// </remarks>
        public ref class Frame : ICppInstance
        {
        public:

            property ::CubbyFlow::Frame* NativePtr;
            property System::IntPtr __Instance
            {
                virtual System::IntPtr get();
                virtual void set(System::IntPtr instance);
            }

            Frame(::CubbyFlow::Frame* native);
            static Frame^ __CreateInstance(::System::IntPtr native);
            /// <summary>Constructs Frame instance with 1/60 seconds time interval.</summary>
            Frame();

            /// <summary>Constructs Frame instance with given time interval.</summary>
            Frame(int newIndex, double newTimeIntervalInSeconds);

            Frame(CubbyFlowSharp::CubbyFlow::Frame^ _0);

            ~Frame();

            property int Index
            {
                int get();
                void set(int);
            }

            property double TimeIntervalInSeconds
            {
                double get();
                void set(double);
            }

            /// <summary>Returns the elapsed time in seconds.</summary>
            property double TimeInSeconds
            {
                double get();
            }

            /// <summary>Advances single frame.</summary>
            void Advance();

            /// <summary>Advances multiple frames.</summary>
            /// <param name="delta">Number of frames to advance.</param>
            void Advance(int delta);

            /// <summary>Advances single frame (prefix).</summary>
            static CubbyFlowSharp::CubbyFlow::Frame^ operator++(CubbyFlowSharp::CubbyFlow::Frame^ __op);

            protected:
            bool __ownsNativeInstance;
        };
    }
}
